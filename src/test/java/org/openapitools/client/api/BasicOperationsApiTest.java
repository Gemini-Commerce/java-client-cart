/*
 * Cart Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import GeminiCommerce_Cart.ApiException;
import org.openapitools.client.model.CartAddProductsRequest;
import org.openapitools.client.model.CartAddProductsResponse;
import org.openapitools.client.model.CartCreateCartRequest;
import org.openapitools.client.model.CartCreateCartResponse;
import org.openapitools.client.model.CartGetActiveCartByCustomerRequest;
import org.openapitools.client.model.CartGetActiveCartByCustomerResponse;
import org.openapitools.client.model.CartGetCartRequest;
import org.openapitools.client.model.CartGetCartResponse;
import org.openapitools.client.model.CartListCartsRequest;
import org.openapitools.client.model.CartListCartsResponse;
import org.openapitools.client.model.CartMergeCartsRequest;
import org.openapitools.client.model.CartMergeCartsResponse;
import org.openapitools.client.model.CartRemoveProductsRequest;
import org.openapitools.client.model.CartSetAdditionalInfoRequest;
import org.openapitools.client.model.CartSetNotesRequest;
import org.openapitools.client.model.CartTriggerRealignmentRequest;
import org.openapitools.client.model.CartTriggerRealignmentResponse;
import org.openapitools.client.model.CartUpdateCartRequest;
import org.openapitools.client.model.CartUpdateProductsRequest;
import org.openapitools.client.model.RpcStatus;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BasicOperationsApi
 */
@Disabled
public class BasicOperationsApiTest {

    private final BasicOperationsApi api = new BasicOperationsApi();

    /**
     * Add Products
     *
     * This endpoint allows you to add products to a shopping cart. The AddProducts method enables you to specify the tenantId and cartId to identify the target shopping cart, and provide a list of items to be added.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addProductsTest() throws ApiException {
        CartAddProductsRequest body = null;
        CartAddProductsResponse response = api.addProducts(body);
        // TODO: test validations
    }

    /**
     * Create Cart
     *
     * The CreateCart endpoint allows users to create a new cart for their shopping session. By making a request to this endpoint, users can initiate a new cart and obtain a unique identifier for future cart operations. This endpoint enables seamless cart management and provides a foundation for adding products and performing checkout operations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCartTest() throws ApiException {
        CartCreateCartRequest body = null;
        CartCreateCartResponse response = api.createCart(body);
        // TODO: test validations
    }

    /**
     * Get Active Cart By Customer
     *
     * Get the active cart by customer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getActiveCartByCustomerTest() throws ApiException {
        CartGetActiveCartByCustomerRequest body = null;
        CartGetActiveCartByCustomerResponse response = api.getActiveCartByCustomer(body);
        // TODO: test validations
    }

    /**
     * Get Cart
     *
     * Get the cart
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCartTest() throws ApiException {
        CartGetCartRequest body = null;
        CartGetCartResponse response = api.getCart(body);
        // TODO: test validations
    }

    /**
     * List Carts
     *
     * List all carts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCartsTest() throws ApiException {
        CartListCartsRequest body = null;
        CartListCartsResponse response = api.listCarts(body);
        // TODO: test validations
    }

    /**
     * Merge Carts
     *
     * Merge carts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mergeCartsTest() throws ApiException {
        CartMergeCartsRequest body = null;
        CartMergeCartsResponse response = api.mergeCarts(body);
        // TODO: test validations
    }

    /**
     * Remove Products
     *
     * Remove products from the cart
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeProductsTest() throws ApiException {
        CartRemoveProductsRequest body = null;
        Object response = api.removeProducts(body);
        // TODO: test validations
    }

    /**
     * Set Additional Info
     *
     * Set additional info
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setAdditionalInfoTest() throws ApiException {
        CartSetAdditionalInfoRequest body = null;
        Object response = api.setAdditionalInfo(body);
        // TODO: test validations
    }

    /**
     * Set Notes
     *
     * Set notes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setNotesTest() throws ApiException {
        CartSetNotesRequest body = null;
        Object response = api.setNotes(body);
        // TODO: test validations
    }

    /**
     * Trigger Realignment
     *
     * Trigger realignment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void triggerRealignmentTest() throws ApiException {
        CartTriggerRealignmentRequest body = null;
        CartTriggerRealignmentResponse response = api.triggerRealignment(body);
        // TODO: test validations
    }

    /**
     * Update Cart
     *
     * Update the cart
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCartTest() throws ApiException {
        CartUpdateCartRequest body = null;
        Object response = api.updateCart(body);
        // TODO: test validations
    }

    /**
     * Update Products
     *
     * Update products in the cart
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProductsTest() throws ApiException {
        CartUpdateProductsRequest body = null;
        Object response = api.updateProducts(body);
        // TODO: test validations
    }

}
