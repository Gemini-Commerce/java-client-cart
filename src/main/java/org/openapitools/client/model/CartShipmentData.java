/*
 * Cart Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CartMoney;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import GeminiCommerce_Cart.JSON;

/**
 * CartShipmentData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-21T15:21:28.271708366Z[Etc/UTC]")
public class CartShipmentData {
  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private String method;

  public static final String SERIALIZED_NAME_SHIPMENT_GRN = "shipmentGrn";
  @SerializedName(SERIALIZED_NAME_SHIPMENT_GRN)
  private String shipmentGrn;

  public static final String SERIALIZED_NAME_PAYLOAD = "payload";
  @SerializedName(SERIALIZED_NAME_PAYLOAD)
  private String payload;

  public static final String SERIALIZED_NAME_CART_ITEM_IDS = "cartItemIds";
  @SerializedName(SERIALIZED_NAME_CART_ITEM_IDS)
  private List<String> cartItemIds;

  public static final String SERIALIZED_NAME_FEE = "fee";
  @SerializedName(SERIALIZED_NAME_FEE)
  private CartMoney fee;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_VAT_AMOUNT = "vatAmount";
  @SerializedName(SERIALIZED_NAME_VAT_AMOUNT)
  private CartMoney vatAmount;

  public static final String SERIALIZED_NAME_VAT_PERCENTAGE = "vatPercentage";
  @SerializedName(SERIALIZED_NAME_VAT_PERCENTAGE)
  private Float vatPercentage;

  public static final String SERIALIZED_NAME_VAT_INACCURATE = "vatInaccurate";
  @SerializedName(SERIALIZED_NAME_VAT_INACCURATE)
  private Boolean vatInaccurate;

  public static final String SERIALIZED_NAME_VAT_CALCULATED = "vatCalculated";
  @SerializedName(SERIALIZED_NAME_VAT_CALCULATED)
  private Boolean vatCalculated;

  public CartShipmentData() {
  }

  public CartShipmentData code(String code) {
    this.code = code;
    return this;
  }

   /**
   * Get code
   * @return code
  **/
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public CartShipmentData method(String method) {
    this.method = method;
    return this;
  }

   /**
   * Get method
   * @return method
  **/
  @javax.annotation.Nullable
  public String getMethod() {
    return method;
  }

  public void setMethod(String method) {
    this.method = method;
  }


  public CartShipmentData shipmentGrn(String shipmentGrn) {
    this.shipmentGrn = shipmentGrn;
    return this;
  }

   /**
   * Get shipmentGrn
   * @return shipmentGrn
  **/
  @javax.annotation.Nullable
  public String getShipmentGrn() {
    return shipmentGrn;
  }

  public void setShipmentGrn(String shipmentGrn) {
    this.shipmentGrn = shipmentGrn;
  }


  public CartShipmentData payload(String payload) {
    this.payload = payload;
    return this;
  }

   /**
   * Get payload
   * @return payload
  **/
  @javax.annotation.Nullable
  public String getPayload() {
    return payload;
  }

  public void setPayload(String payload) {
    this.payload = payload;
  }


  public CartShipmentData cartItemIds(List<String> cartItemIds) {
    this.cartItemIds = cartItemIds;
    return this;
  }

  public CartShipmentData addCartItemIdsItem(String cartItemIdsItem) {
    if (this.cartItemIds == null) {
      this.cartItemIds = new ArrayList<>();
    }
    this.cartItemIds.add(cartItemIdsItem);
    return this;
  }

   /**
   * Get cartItemIds
   * @return cartItemIds
  **/
  @javax.annotation.Nullable
  public List<String> getCartItemIds() {
    return cartItemIds;
  }

  public void setCartItemIds(List<String> cartItemIds) {
    this.cartItemIds = cartItemIds;
  }


  public CartShipmentData fee(CartMoney fee) {
    this.fee = fee;
    return this;
  }

   /**
   * Get fee
   * @return fee
  **/
  @javax.annotation.Nullable
  public CartMoney getFee() {
    return fee;
  }

  public void setFee(CartMoney fee) {
    this.fee = fee;
  }


  public CartShipmentData label(String label) {
    this.label = label;
    return this;
  }

   /**
   * Get label
   * @return label
  **/
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public CartShipmentData vatAmount(CartMoney vatAmount) {
    this.vatAmount = vatAmount;
    return this;
  }

   /**
   * Get vatAmount
   * @return vatAmount
  **/
  @javax.annotation.Nullable
  public CartMoney getVatAmount() {
    return vatAmount;
  }

  public void setVatAmount(CartMoney vatAmount) {
    this.vatAmount = vatAmount;
  }


  public CartShipmentData vatPercentage(Float vatPercentage) {
    this.vatPercentage = vatPercentage;
    return this;
  }

   /**
   * Get vatPercentage
   * @return vatPercentage
  **/
  @javax.annotation.Nullable
  public Float getVatPercentage() {
    return vatPercentage;
  }

  public void setVatPercentage(Float vatPercentage) {
    this.vatPercentage = vatPercentage;
  }


  public CartShipmentData vatInaccurate(Boolean vatInaccurate) {
    this.vatInaccurate = vatInaccurate;
    return this;
  }

   /**
   * Get vatInaccurate
   * @return vatInaccurate
  **/
  @javax.annotation.Nullable
  public Boolean getVatInaccurate() {
    return vatInaccurate;
  }

  public void setVatInaccurate(Boolean vatInaccurate) {
    this.vatInaccurate = vatInaccurate;
  }


  public CartShipmentData vatCalculated(Boolean vatCalculated) {
    this.vatCalculated = vatCalculated;
    return this;
  }

   /**
   * Get vatCalculated
   * @return vatCalculated
  **/
  @javax.annotation.Nullable
  public Boolean getVatCalculated() {
    return vatCalculated;
  }

  public void setVatCalculated(Boolean vatCalculated) {
    this.vatCalculated = vatCalculated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CartShipmentData cartShipmentData = (CartShipmentData) o;
    return Objects.equals(this.code, cartShipmentData.code) &&
        Objects.equals(this.method, cartShipmentData.method) &&
        Objects.equals(this.shipmentGrn, cartShipmentData.shipmentGrn) &&
        Objects.equals(this.payload, cartShipmentData.payload) &&
        Objects.equals(this.cartItemIds, cartShipmentData.cartItemIds) &&
        Objects.equals(this.fee, cartShipmentData.fee) &&
        Objects.equals(this.label, cartShipmentData.label) &&
        Objects.equals(this.vatAmount, cartShipmentData.vatAmount) &&
        Objects.equals(this.vatPercentage, cartShipmentData.vatPercentage) &&
        Objects.equals(this.vatInaccurate, cartShipmentData.vatInaccurate) &&
        Objects.equals(this.vatCalculated, cartShipmentData.vatCalculated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, method, shipmentGrn, payload, cartItemIds, fee, label, vatAmount, vatPercentage, vatInaccurate, vatCalculated);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CartShipmentData {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    shipmentGrn: ").append(toIndentedString(shipmentGrn)).append("\n");
    sb.append("    payload: ").append(toIndentedString(payload)).append("\n");
    sb.append("    cartItemIds: ").append(toIndentedString(cartItemIds)).append("\n");
    sb.append("    fee: ").append(toIndentedString(fee)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    vatAmount: ").append(toIndentedString(vatAmount)).append("\n");
    sb.append("    vatPercentage: ").append(toIndentedString(vatPercentage)).append("\n");
    sb.append("    vatInaccurate: ").append(toIndentedString(vatInaccurate)).append("\n");
    sb.append("    vatCalculated: ").append(toIndentedString(vatCalculated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("method");
    openapiFields.add("shipmentGrn");
    openapiFields.add("payload");
    openapiFields.add("cartItemIds");
    openapiFields.add("fee");
    openapiFields.add("label");
    openapiFields.add("vatAmount");
    openapiFields.add("vatPercentage");
    openapiFields.add("vatInaccurate");
    openapiFields.add("vatCalculated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CartShipmentData
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CartShipmentData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CartShipmentData is not found in the empty JSON string", CartShipmentData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CartShipmentData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CartShipmentData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("method") != null && !jsonObj.get("method").isJsonNull()) && !jsonObj.get("method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("method").toString()));
      }
      if ((jsonObj.get("shipmentGrn") != null && !jsonObj.get("shipmentGrn").isJsonNull()) && !jsonObj.get("shipmentGrn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipmentGrn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipmentGrn").toString()));
      }
      if ((jsonObj.get("payload") != null && !jsonObj.get("payload").isJsonNull()) && !jsonObj.get("payload").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payload` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payload").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("cartItemIds") != null && !jsonObj.get("cartItemIds").isJsonNull() && !jsonObj.get("cartItemIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cartItemIds` to be an array in the JSON string but got `%s`", jsonObj.get("cartItemIds").toString()));
      }
      // validate the optional field `fee`
      if (jsonObj.get("fee") != null && !jsonObj.get("fee").isJsonNull()) {
        CartMoney.validateJsonElement(jsonObj.get("fee"));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      // validate the optional field `vatAmount`
      if (jsonObj.get("vatAmount") != null && !jsonObj.get("vatAmount").isJsonNull()) {
        CartMoney.validateJsonElement(jsonObj.get("vatAmount"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CartShipmentData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CartShipmentData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CartShipmentData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CartShipmentData.class));

       return (TypeAdapter<T>) new TypeAdapter<CartShipmentData>() {
           @Override
           public void write(JsonWriter out, CartShipmentData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CartShipmentData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CartShipmentData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CartShipmentData
  * @throws IOException if the JSON string is invalid with respect to CartShipmentData
  */
  public static CartShipmentData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CartShipmentData.class);
  }

 /**
  * Convert an instance of CartShipmentData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

