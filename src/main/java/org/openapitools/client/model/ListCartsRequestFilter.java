/*
 * Cart Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ListCartsRequestFilterCartStatus;
import org.openapitools.client.model.ListCartsRequestFilterDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import GeminiCommerce.Cart.JSON;

/**
 * ListCartsRequestFilter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-19T10:43:10.860688922Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class ListCartsRequestFilter {
  public static final String SERIALIZED_NAME_SEARCH_TERMS = "searchTerms";
  @SerializedName(SERIALIZED_NAME_SEARCH_TERMS)
  private List<String> searchTerms = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTOMER_EMAILS = "customerEmails";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_EMAILS)
  private List<String> customerEmails = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTOMER_FIRSTNAMES = "customerFirstnames";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_FIRSTNAMES)
  private List<String> customerFirstnames = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTOMER_LASTNAMES = "customerLastnames";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_LASTNAMES)
  private List<String> customerLastnames = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTOMER_PHONES = "customerPhones";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_PHONES)
  private List<String> customerPhones = new ArrayList<>();

  public static final String SERIALIZED_NAME_CART_IDS = "cartIds";
  @SerializedName(SERIALIZED_NAME_CART_IDS)
  private List<String> cartIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_CART_STATUS = "cartStatus";
  @SerializedName(SERIALIZED_NAME_CART_STATUS)
  private ListCartsRequestFilterCartStatus cartStatus = ListCartsRequestFilterCartStatus.UNKNOWN;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private List<ListCartsRequestFilterDate> createdAt = new ArrayList<>();

  public static final String SERIALIZED_NAME_AGENT_GRN = "agentGrn";
  @SerializedName(SERIALIZED_NAME_AGENT_GRN)
  private String agentGrn;

  public ListCartsRequestFilter() {
  }

  public ListCartsRequestFilter searchTerms(List<String> searchTerms) {
    this.searchTerms = searchTerms;
    return this;
  }

  public ListCartsRequestFilter addSearchTermsItem(String searchTermsItem) {
    if (this.searchTerms == null) {
      this.searchTerms = new ArrayList<>();
    }
    this.searchTerms.add(searchTermsItem);
    return this;
  }

  /**
   * Get searchTerms
   * @return searchTerms
   */
  @javax.annotation.Nullable
  public List<String> getSearchTerms() {
    return searchTerms;
  }

  public void setSearchTerms(List<String> searchTerms) {
    this.searchTerms = searchTerms;
  }


  public ListCartsRequestFilter customerEmails(List<String> customerEmails) {
    this.customerEmails = customerEmails;
    return this;
  }

  public ListCartsRequestFilter addCustomerEmailsItem(String customerEmailsItem) {
    if (this.customerEmails == null) {
      this.customerEmails = new ArrayList<>();
    }
    this.customerEmails.add(customerEmailsItem);
    return this;
  }

  /**
   * Get customerEmails
   * @return customerEmails
   */
  @javax.annotation.Nullable
  public List<String> getCustomerEmails() {
    return customerEmails;
  }

  public void setCustomerEmails(List<String> customerEmails) {
    this.customerEmails = customerEmails;
  }


  public ListCartsRequestFilter customerFirstnames(List<String> customerFirstnames) {
    this.customerFirstnames = customerFirstnames;
    return this;
  }

  public ListCartsRequestFilter addCustomerFirstnamesItem(String customerFirstnamesItem) {
    if (this.customerFirstnames == null) {
      this.customerFirstnames = new ArrayList<>();
    }
    this.customerFirstnames.add(customerFirstnamesItem);
    return this;
  }

  /**
   * Get customerFirstnames
   * @return customerFirstnames
   */
  @javax.annotation.Nullable
  public List<String> getCustomerFirstnames() {
    return customerFirstnames;
  }

  public void setCustomerFirstnames(List<String> customerFirstnames) {
    this.customerFirstnames = customerFirstnames;
  }


  public ListCartsRequestFilter customerLastnames(List<String> customerLastnames) {
    this.customerLastnames = customerLastnames;
    return this;
  }

  public ListCartsRequestFilter addCustomerLastnamesItem(String customerLastnamesItem) {
    if (this.customerLastnames == null) {
      this.customerLastnames = new ArrayList<>();
    }
    this.customerLastnames.add(customerLastnamesItem);
    return this;
  }

  /**
   * Get customerLastnames
   * @return customerLastnames
   */
  @javax.annotation.Nullable
  public List<String> getCustomerLastnames() {
    return customerLastnames;
  }

  public void setCustomerLastnames(List<String> customerLastnames) {
    this.customerLastnames = customerLastnames;
  }


  public ListCartsRequestFilter customerPhones(List<String> customerPhones) {
    this.customerPhones = customerPhones;
    return this;
  }

  public ListCartsRequestFilter addCustomerPhonesItem(String customerPhonesItem) {
    if (this.customerPhones == null) {
      this.customerPhones = new ArrayList<>();
    }
    this.customerPhones.add(customerPhonesItem);
    return this;
  }

  /**
   * Get customerPhones
   * @return customerPhones
   */
  @javax.annotation.Nullable
  public List<String> getCustomerPhones() {
    return customerPhones;
  }

  public void setCustomerPhones(List<String> customerPhones) {
    this.customerPhones = customerPhones;
  }


  public ListCartsRequestFilter cartIds(List<String> cartIds) {
    this.cartIds = cartIds;
    return this;
  }

  public ListCartsRequestFilter addCartIdsItem(String cartIdsItem) {
    if (this.cartIds == null) {
      this.cartIds = new ArrayList<>();
    }
    this.cartIds.add(cartIdsItem);
    return this;
  }

  /**
   * Get cartIds
   * @return cartIds
   */
  @javax.annotation.Nullable
  public List<String> getCartIds() {
    return cartIds;
  }

  public void setCartIds(List<String> cartIds) {
    this.cartIds = cartIds;
  }


  public ListCartsRequestFilter cartStatus(ListCartsRequestFilterCartStatus cartStatus) {
    this.cartStatus = cartStatus;
    return this;
  }

  /**
   * Get cartStatus
   * @return cartStatus
   */
  @javax.annotation.Nullable
  public ListCartsRequestFilterCartStatus getCartStatus() {
    return cartStatus;
  }

  public void setCartStatus(ListCartsRequestFilterCartStatus cartStatus) {
    this.cartStatus = cartStatus;
  }


  public ListCartsRequestFilter createdAt(List<ListCartsRequestFilterDate> createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  public ListCartsRequestFilter addCreatedAtItem(ListCartsRequestFilterDate createdAtItem) {
    if (this.createdAt == null) {
      this.createdAt = new ArrayList<>();
    }
    this.createdAt.add(createdAtItem);
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public List<ListCartsRequestFilterDate> getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(List<ListCartsRequestFilterDate> createdAt) {
    this.createdAt = createdAt;
  }


  public ListCartsRequestFilter agentGrn(String agentGrn) {
    this.agentGrn = agentGrn;
    return this;
  }

  /**
   * Get agentGrn
   * @return agentGrn
   */
  @javax.annotation.Nullable
  public String getAgentGrn() {
    return agentGrn;
  }

  public void setAgentGrn(String agentGrn) {
    this.agentGrn = agentGrn;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ListCartsRequestFilter instance itself
   */
  public ListCartsRequestFilter putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListCartsRequestFilter listCartsRequestFilter = (ListCartsRequestFilter) o;
    return Objects.equals(this.searchTerms, listCartsRequestFilter.searchTerms) &&
        Objects.equals(this.customerEmails, listCartsRequestFilter.customerEmails) &&
        Objects.equals(this.customerFirstnames, listCartsRequestFilter.customerFirstnames) &&
        Objects.equals(this.customerLastnames, listCartsRequestFilter.customerLastnames) &&
        Objects.equals(this.customerPhones, listCartsRequestFilter.customerPhones) &&
        Objects.equals(this.cartIds, listCartsRequestFilter.cartIds) &&
        Objects.equals(this.cartStatus, listCartsRequestFilter.cartStatus) &&
        Objects.equals(this.createdAt, listCartsRequestFilter.createdAt) &&
        Objects.equals(this.agentGrn, listCartsRequestFilter.agentGrn)&&
        Objects.equals(this.additionalProperties, listCartsRequestFilter.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(searchTerms, customerEmails, customerFirstnames, customerLastnames, customerPhones, cartIds, cartStatus, createdAt, agentGrn, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListCartsRequestFilter {\n");
    sb.append("    searchTerms: ").append(toIndentedString(searchTerms)).append("\n");
    sb.append("    customerEmails: ").append(toIndentedString(customerEmails)).append("\n");
    sb.append("    customerFirstnames: ").append(toIndentedString(customerFirstnames)).append("\n");
    sb.append("    customerLastnames: ").append(toIndentedString(customerLastnames)).append("\n");
    sb.append("    customerPhones: ").append(toIndentedString(customerPhones)).append("\n");
    sb.append("    cartIds: ").append(toIndentedString(cartIds)).append("\n");
    sb.append("    cartStatus: ").append(toIndentedString(cartStatus)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    agentGrn: ").append(toIndentedString(agentGrn)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("searchTerms");
    openapiFields.add("customerEmails");
    openapiFields.add("customerFirstnames");
    openapiFields.add("customerLastnames");
    openapiFields.add("customerPhones");
    openapiFields.add("cartIds");
    openapiFields.add("cartStatus");
    openapiFields.add("createdAt");
    openapiFields.add("agentGrn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListCartsRequestFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListCartsRequestFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListCartsRequestFilter is not found in the empty JSON string", ListCartsRequestFilter.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("searchTerms") != null && !jsonObj.get("searchTerms").isJsonNull() && !jsonObj.get("searchTerms").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `searchTerms` to be an array in the JSON string but got `%s`", jsonObj.get("searchTerms").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("customerEmails") != null && !jsonObj.get("customerEmails").isJsonNull() && !jsonObj.get("customerEmails").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerEmails` to be an array in the JSON string but got `%s`", jsonObj.get("customerEmails").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("customerFirstnames") != null && !jsonObj.get("customerFirstnames").isJsonNull() && !jsonObj.get("customerFirstnames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerFirstnames` to be an array in the JSON string but got `%s`", jsonObj.get("customerFirstnames").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("customerLastnames") != null && !jsonObj.get("customerLastnames").isJsonNull() && !jsonObj.get("customerLastnames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerLastnames` to be an array in the JSON string but got `%s`", jsonObj.get("customerLastnames").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("customerPhones") != null && !jsonObj.get("customerPhones").isJsonNull() && !jsonObj.get("customerPhones").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerPhones` to be an array in the JSON string but got `%s`", jsonObj.get("customerPhones").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("cartIds") != null && !jsonObj.get("cartIds").isJsonNull() && !jsonObj.get("cartIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cartIds` to be an array in the JSON string but got `%s`", jsonObj.get("cartIds").toString()));
      }
      // validate the optional field `cartStatus`
      if (jsonObj.get("cartStatus") != null && !jsonObj.get("cartStatus").isJsonNull()) {
        ListCartsRequestFilterCartStatus.validateJsonElement(jsonObj.get("cartStatus"));
      }
      if (jsonObj.get("createdAt") != null && !jsonObj.get("createdAt").isJsonNull()) {
        JsonArray jsonArraycreatedAt = jsonObj.getAsJsonArray("createdAt");
        if (jsonArraycreatedAt != null) {
          // ensure the json data is an array
          if (!jsonObj.get("createdAt").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `createdAt` to be an array in the JSON string but got `%s`", jsonObj.get("createdAt").toString()));
          }

          // validate the optional field `createdAt` (array)
          for (int i = 0; i < jsonArraycreatedAt.size(); i++) {
            ListCartsRequestFilterDate.validateJsonElement(jsonArraycreatedAt.get(i));
          };
        }
      }
      if ((jsonObj.get("agentGrn") != null && !jsonObj.get("agentGrn").isJsonNull()) && !jsonObj.get("agentGrn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agentGrn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agentGrn").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListCartsRequestFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListCartsRequestFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListCartsRequestFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListCartsRequestFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<ListCartsRequestFilter>() {
           @Override
           public void write(JsonWriter out, ListCartsRequestFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ListCartsRequestFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             ListCartsRequestFilter instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListCartsRequestFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListCartsRequestFilter
   * @throws IOException if the JSON string is invalid with respect to ListCartsRequestFilter
   */
  public static ListCartsRequestFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListCartsRequestFilter.class);
  }

  /**
   * Convert an instance of ListCartsRequestFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

