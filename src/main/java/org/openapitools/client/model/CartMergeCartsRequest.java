/*
 * Cart Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import GeminiCommerce_Cart.JSON;

/**
 * CartMergeCartsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-21T15:21:28.271708366Z[Etc/UTC]")
public class CartMergeCartsRequest {
  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private String tenantId;

  public static final String SERIALIZED_NAME_SOURCE_CART_IDS = "sourceCartIds";
  @SerializedName(SERIALIZED_NAME_SOURCE_CART_IDS)
  private List<String> sourceCartIds;

  public static final String SERIALIZED_NAME_TARGET_CART_ID = "targetCartId";
  @SerializedName(SERIALIZED_NAME_TARGET_CART_ID)
  private String targetCartId;

  public CartMergeCartsRequest() {
  }

  public CartMergeCartsRequest tenantId(String tenantId) {
    this.tenantId = tenantId;
    return this;
  }

   /**
   * Get tenantId
   * @return tenantId
  **/
  @javax.annotation.Nullable
  public String getTenantId() {
    return tenantId;
  }

  public void setTenantId(String tenantId) {
    this.tenantId = tenantId;
  }


  public CartMergeCartsRequest sourceCartIds(List<String> sourceCartIds) {
    this.sourceCartIds = sourceCartIds;
    return this;
  }

  public CartMergeCartsRequest addSourceCartIdsItem(String sourceCartIdsItem) {
    if (this.sourceCartIds == null) {
      this.sourceCartIds = new ArrayList<>();
    }
    this.sourceCartIds.add(sourceCartIdsItem);
    return this;
  }

   /**
   * Get sourceCartIds
   * @return sourceCartIds
  **/
  @javax.annotation.Nullable
  public List<String> getSourceCartIds() {
    return sourceCartIds;
  }

  public void setSourceCartIds(List<String> sourceCartIds) {
    this.sourceCartIds = sourceCartIds;
  }


  public CartMergeCartsRequest targetCartId(String targetCartId) {
    this.targetCartId = targetCartId;
    return this;
  }

   /**
   * Get targetCartId
   * @return targetCartId
  **/
  @javax.annotation.Nullable
  public String getTargetCartId() {
    return targetCartId;
  }

  public void setTargetCartId(String targetCartId) {
    this.targetCartId = targetCartId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CartMergeCartsRequest cartMergeCartsRequest = (CartMergeCartsRequest) o;
    return Objects.equals(this.tenantId, cartMergeCartsRequest.tenantId) &&
        Objects.equals(this.sourceCartIds, cartMergeCartsRequest.sourceCartIds) &&
        Objects.equals(this.targetCartId, cartMergeCartsRequest.targetCartId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tenantId, sourceCartIds, targetCartId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CartMergeCartsRequest {\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    sourceCartIds: ").append(toIndentedString(sourceCartIds)).append("\n");
    sb.append("    targetCartId: ").append(toIndentedString(targetCartId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tenantId");
    openapiFields.add("sourceCartIds");
    openapiFields.add("targetCartId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CartMergeCartsRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CartMergeCartsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CartMergeCartsRequest is not found in the empty JSON string", CartMergeCartsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CartMergeCartsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CartMergeCartsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("tenantId") != null && !jsonObj.get("tenantId").isJsonNull()) && !jsonObj.get("tenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sourceCartIds") != null && !jsonObj.get("sourceCartIds").isJsonNull() && !jsonObj.get("sourceCartIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceCartIds` to be an array in the JSON string but got `%s`", jsonObj.get("sourceCartIds").toString()));
      }
      if ((jsonObj.get("targetCartId") != null && !jsonObj.get("targetCartId").isJsonNull()) && !jsonObj.get("targetCartId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetCartId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetCartId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CartMergeCartsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CartMergeCartsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CartMergeCartsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CartMergeCartsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CartMergeCartsRequest>() {
           @Override
           public void write(JsonWriter out, CartMergeCartsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CartMergeCartsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CartMergeCartsRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CartMergeCartsRequest
  * @throws IOException if the JSON string is invalid with respect to CartMergeCartsRequest
  */
  public static CartMergeCartsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CartMergeCartsRequest.class);
  }

 /**
  * Convert an instance of CartMergeCartsRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

