/*
 * Cart Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CartCartItem;
import org.openapitools.client.model.CartCartStatus;
import org.openapitools.client.model.CartCartSubtotal;
import org.openapitools.client.model.CartCurrency;
import org.openapitools.client.model.CartCustomerData;
import org.openapitools.client.model.CartMoney;
import org.openapitools.client.model.CartPaymentData;
import org.openapitools.client.model.CartPostalAddress;
import org.openapitools.client.model.CartPromotionData;
import org.openapitools.client.model.CartShipmentData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import GeminiCommerce.Cart.JSON;

/**
 * CartCartData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-19T10:43:10.860688922Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class CartCartData {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_GRN = "grn";
  @SerializedName(SERIALIZED_NAME_GRN)
  private String grn;

  public static final String SERIALIZED_NAME_CHANNEL = "channel";
  @SerializedName(SERIALIZED_NAME_CHANNEL)
  private String channel;

  public static final String SERIALIZED_NAME_MARKET = "market";
  @SerializedName(SERIALIZED_NAME_MARKET)
  private String market;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<CartCartItem> items = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAYMENTS = "payments";
  @SerializedName(SERIALIZED_NAME_PAYMENTS)
  private List<CartPaymentData> payments = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHIPMENTS = "shipments";
  @SerializedName(SERIALIZED_NAME_SHIPMENTS)
  private List<CartShipmentData> shipments = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROMOTIONS = "promotions";
  @SerializedName(SERIALIZED_NAME_PROMOTIONS)
  private List<CartPromotionData> promotions = new ArrayList<>();

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private CartCurrency currency = CartCurrency.XXX;

  public static final String SERIALIZED_NAME_SUBTOTALS = "subtotals";
  @SerializedName(SERIALIZED_NAME_SUBTOTALS)
  private List<CartCartSubtotal> subtotals = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private CartMoney total;

  public static final String SERIALIZED_NAME_TOTAL_DUE = "totalDue";
  @SerializedName(SERIALIZED_NAME_TOTAL_DUE)
  private CartMoney totalDue;

  public static final String SERIALIZED_NAME_VAT_INCLUDED = "vatIncluded";
  @SerializedName(SERIALIZED_NAME_VAT_INCLUDED)
  private Boolean vatIncluded;

  public static final String SERIALIZED_NAME_BILLING_ADDRESS = "billingAddress";
  @SerializedName(SERIALIZED_NAME_BILLING_ADDRESS)
  private CartPostalAddress billingAddress;

  public static final String SERIALIZED_NAME_SHIPPING_ADDRESS = "shippingAddress";
  @SerializedName(SERIALIZED_NAME_SHIPPING_ADDRESS)
  private CartPostalAddress shippingAddress;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private CartCartStatus status = CartCartStatus.UNKNOWN;

  public static final String SERIALIZED_NAME_CUSTOMER = "customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private CartCustomerData customer;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public CartCartData() {
  }

  public CartCartData id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public CartCartData grn(String grn) {
    this.grn = grn;
    return this;
  }

  /**
   * Get grn
   * @return grn
   */
  @javax.annotation.Nullable
  public String getGrn() {
    return grn;
  }

  public void setGrn(String grn) {
    this.grn = grn;
  }


  public CartCartData channel(String channel) {
    this.channel = channel;
    return this;
  }

  /**
   * Get channel
   * @return channel
   */
  @javax.annotation.Nullable
  public String getChannel() {
    return channel;
  }

  public void setChannel(String channel) {
    this.channel = channel;
  }


  public CartCartData market(String market) {
    this.market = market;
    return this;
  }

  /**
   * Get market
   * @return market
   */
  @javax.annotation.Nullable
  public String getMarket() {
    return market;
  }

  public void setMarket(String market) {
    this.market = market;
  }


  public CartCartData locale(String locale) {
    this.locale = locale;
    return this;
  }

  /**
   * Get locale
   * @return locale
   */
  @javax.annotation.Nullable
  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }


  public CartCartData items(List<CartCartItem> items) {
    this.items = items;
    return this;
  }

  public CartCartData addItemsItem(CartCartItem itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
   * Get items
   * @return items
   */
  @javax.annotation.Nullable
  public List<CartCartItem> getItems() {
    return items;
  }

  public void setItems(List<CartCartItem> items) {
    this.items = items;
  }


  public CartCartData payments(List<CartPaymentData> payments) {
    this.payments = payments;
    return this;
  }

  public CartCartData addPaymentsItem(CartPaymentData paymentsItem) {
    if (this.payments == null) {
      this.payments = new ArrayList<>();
    }
    this.payments.add(paymentsItem);
    return this;
  }

  /**
   * Get payments
   * @return payments
   */
  @javax.annotation.Nullable
  public List<CartPaymentData> getPayments() {
    return payments;
  }

  public void setPayments(List<CartPaymentData> payments) {
    this.payments = payments;
  }


  public CartCartData shipments(List<CartShipmentData> shipments) {
    this.shipments = shipments;
    return this;
  }

  public CartCartData addShipmentsItem(CartShipmentData shipmentsItem) {
    if (this.shipments == null) {
      this.shipments = new ArrayList<>();
    }
    this.shipments.add(shipmentsItem);
    return this;
  }

  /**
   * Get shipments
   * @return shipments
   */
  @javax.annotation.Nullable
  public List<CartShipmentData> getShipments() {
    return shipments;
  }

  public void setShipments(List<CartShipmentData> shipments) {
    this.shipments = shipments;
  }


  public CartCartData promotions(List<CartPromotionData> promotions) {
    this.promotions = promotions;
    return this;
  }

  public CartCartData addPromotionsItem(CartPromotionData promotionsItem) {
    if (this.promotions == null) {
      this.promotions = new ArrayList<>();
    }
    this.promotions.add(promotionsItem);
    return this;
  }

  /**
   * Get promotions
   * @return promotions
   */
  @javax.annotation.Nullable
  public List<CartPromotionData> getPromotions() {
    return promotions;
  }

  public void setPromotions(List<CartPromotionData> promotions) {
    this.promotions = promotions;
  }


  public CartCartData currency(CartCurrency currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Get currency
   * @return currency
   */
  @javax.annotation.Nullable
  public CartCurrency getCurrency() {
    return currency;
  }

  public void setCurrency(CartCurrency currency) {
    this.currency = currency;
  }


  public CartCartData subtotals(List<CartCartSubtotal> subtotals) {
    this.subtotals = subtotals;
    return this;
  }

  public CartCartData addSubtotalsItem(CartCartSubtotal subtotalsItem) {
    if (this.subtotals == null) {
      this.subtotals = new ArrayList<>();
    }
    this.subtotals.add(subtotalsItem);
    return this;
  }

  /**
   * Get subtotals
   * @return subtotals
   */
  @javax.annotation.Nullable
  public List<CartCartSubtotal> getSubtotals() {
    return subtotals;
  }

  public void setSubtotals(List<CartCartSubtotal> subtotals) {
    this.subtotals = subtotals;
  }


  public CartCartData total(CartMoney total) {
    this.total = total;
    return this;
  }

  /**
   * Get total
   * @return total
   */
  @javax.annotation.Nullable
  public CartMoney getTotal() {
    return total;
  }

  public void setTotal(CartMoney total) {
    this.total = total;
  }


  public CartCartData totalDue(CartMoney totalDue) {
    this.totalDue = totalDue;
    return this;
  }

  /**
   * Get totalDue
   * @return totalDue
   */
  @javax.annotation.Nullable
  public CartMoney getTotalDue() {
    return totalDue;
  }

  public void setTotalDue(CartMoney totalDue) {
    this.totalDue = totalDue;
  }


  public CartCartData vatIncluded(Boolean vatIncluded) {
    this.vatIncluded = vatIncluded;
    return this;
  }

  /**
   * Get vatIncluded
   * @return vatIncluded
   */
  @javax.annotation.Nullable
  public Boolean getVatIncluded() {
    return vatIncluded;
  }

  public void setVatIncluded(Boolean vatIncluded) {
    this.vatIncluded = vatIncluded;
  }


  public CartCartData billingAddress(CartPostalAddress billingAddress) {
    this.billingAddress = billingAddress;
    return this;
  }

  /**
   * Get billingAddress
   * @return billingAddress
   */
  @javax.annotation.Nullable
  public CartPostalAddress getBillingAddress() {
    return billingAddress;
  }

  public void setBillingAddress(CartPostalAddress billingAddress) {
    this.billingAddress = billingAddress;
  }


  public CartCartData shippingAddress(CartPostalAddress shippingAddress) {
    this.shippingAddress = shippingAddress;
    return this;
  }

  /**
   * Get shippingAddress
   * @return shippingAddress
   */
  @javax.annotation.Nullable
  public CartPostalAddress getShippingAddress() {
    return shippingAddress;
  }

  public void setShippingAddress(CartPostalAddress shippingAddress) {
    this.shippingAddress = shippingAddress;
  }


  public CartCartData status(CartCartStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public CartCartStatus getStatus() {
    return status;
  }

  public void setStatus(CartCartStatus status) {
    this.status = status;
  }


  public CartCartData customer(CartCustomerData customer) {
    this.customer = customer;
    return this;
  }

  /**
   * Get customer
   * @return customer
   */
  @javax.annotation.Nullable
  public CartCustomerData getCustomer() {
    return customer;
  }

  public void setCustomer(CartCustomerData customer) {
    this.customer = customer;
  }


  public CartCartData notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Get notes
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public CartCartData createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public CartCartData updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CartCartData instance itself
   */
  public CartCartData putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CartCartData cartCartData = (CartCartData) o;
    return Objects.equals(this.id, cartCartData.id) &&
        Objects.equals(this.grn, cartCartData.grn) &&
        Objects.equals(this.channel, cartCartData.channel) &&
        Objects.equals(this.market, cartCartData.market) &&
        Objects.equals(this.locale, cartCartData.locale) &&
        Objects.equals(this.items, cartCartData.items) &&
        Objects.equals(this.payments, cartCartData.payments) &&
        Objects.equals(this.shipments, cartCartData.shipments) &&
        Objects.equals(this.promotions, cartCartData.promotions) &&
        Objects.equals(this.currency, cartCartData.currency) &&
        Objects.equals(this.subtotals, cartCartData.subtotals) &&
        Objects.equals(this.total, cartCartData.total) &&
        Objects.equals(this.totalDue, cartCartData.totalDue) &&
        Objects.equals(this.vatIncluded, cartCartData.vatIncluded) &&
        Objects.equals(this.billingAddress, cartCartData.billingAddress) &&
        Objects.equals(this.shippingAddress, cartCartData.shippingAddress) &&
        Objects.equals(this.status, cartCartData.status) &&
        Objects.equals(this.customer, cartCartData.customer) &&
        Objects.equals(this.notes, cartCartData.notes) &&
        Objects.equals(this.createdAt, cartCartData.createdAt) &&
        Objects.equals(this.updatedAt, cartCartData.updatedAt)&&
        Objects.equals(this.additionalProperties, cartCartData.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, grn, channel, market, locale, items, payments, shipments, promotions, currency, subtotals, total, totalDue, vatIncluded, billingAddress, shippingAddress, status, customer, notes, createdAt, updatedAt, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CartCartData {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    grn: ").append(toIndentedString(grn)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    market: ").append(toIndentedString(market)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    payments: ").append(toIndentedString(payments)).append("\n");
    sb.append("    shipments: ").append(toIndentedString(shipments)).append("\n");
    sb.append("    promotions: ").append(toIndentedString(promotions)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    subtotals: ").append(toIndentedString(subtotals)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    totalDue: ").append(toIndentedString(totalDue)).append("\n");
    sb.append("    vatIncluded: ").append(toIndentedString(vatIncluded)).append("\n");
    sb.append("    billingAddress: ").append(toIndentedString(billingAddress)).append("\n");
    sb.append("    shippingAddress: ").append(toIndentedString(shippingAddress)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("grn");
    openapiFields.add("channel");
    openapiFields.add("market");
    openapiFields.add("locale");
    openapiFields.add("items");
    openapiFields.add("payments");
    openapiFields.add("shipments");
    openapiFields.add("promotions");
    openapiFields.add("currency");
    openapiFields.add("subtotals");
    openapiFields.add("total");
    openapiFields.add("totalDue");
    openapiFields.add("vatIncluded");
    openapiFields.add("billingAddress");
    openapiFields.add("shippingAddress");
    openapiFields.add("status");
    openapiFields.add("customer");
    openapiFields.add("notes");
    openapiFields.add("createdAt");
    openapiFields.add("updatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CartCartData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CartCartData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CartCartData is not found in the empty JSON string", CartCartData.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("grn") != null && !jsonObj.get("grn").isJsonNull()) && !jsonObj.get("grn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `grn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("grn").toString()));
      }
      if ((jsonObj.get("channel") != null && !jsonObj.get("channel").isJsonNull()) && !jsonObj.get("channel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channel").toString()));
      }
      if ((jsonObj.get("market") != null && !jsonObj.get("market").isJsonNull()) && !jsonObj.get("market").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `market` to be a primitive type in the JSON string but got `%s`", jsonObj.get("market").toString()));
      }
      if ((jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull()) && !jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
          }

          // validate the optional field `items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            CartCartItem.validateJsonElement(jsonArrayitems.get(i));
          };
        }
      }
      if (jsonObj.get("payments") != null && !jsonObj.get("payments").isJsonNull()) {
        JsonArray jsonArraypayments = jsonObj.getAsJsonArray("payments");
        if (jsonArraypayments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("payments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `payments` to be an array in the JSON string but got `%s`", jsonObj.get("payments").toString()));
          }

          // validate the optional field `payments` (array)
          for (int i = 0; i < jsonArraypayments.size(); i++) {
            CartPaymentData.validateJsonElement(jsonArraypayments.get(i));
          };
        }
      }
      if (jsonObj.get("shipments") != null && !jsonObj.get("shipments").isJsonNull()) {
        JsonArray jsonArrayshipments = jsonObj.getAsJsonArray("shipments");
        if (jsonArrayshipments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("shipments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `shipments` to be an array in the JSON string but got `%s`", jsonObj.get("shipments").toString()));
          }

          // validate the optional field `shipments` (array)
          for (int i = 0; i < jsonArrayshipments.size(); i++) {
            CartShipmentData.validateJsonElement(jsonArrayshipments.get(i));
          };
        }
      }
      if (jsonObj.get("promotions") != null && !jsonObj.get("promotions").isJsonNull()) {
        JsonArray jsonArraypromotions = jsonObj.getAsJsonArray("promotions");
        if (jsonArraypromotions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("promotions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `promotions` to be an array in the JSON string but got `%s`", jsonObj.get("promotions").toString()));
          }

          // validate the optional field `promotions` (array)
          for (int i = 0; i < jsonArraypromotions.size(); i++) {
            CartPromotionData.validateJsonElement(jsonArraypromotions.get(i));
          };
        }
      }
      // validate the optional field `currency`
      if (jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) {
        CartCurrency.validateJsonElement(jsonObj.get("currency"));
      }
      if (jsonObj.get("subtotals") != null && !jsonObj.get("subtotals").isJsonNull()) {
        JsonArray jsonArraysubtotals = jsonObj.getAsJsonArray("subtotals");
        if (jsonArraysubtotals != null) {
          // ensure the json data is an array
          if (!jsonObj.get("subtotals").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `subtotals` to be an array in the JSON string but got `%s`", jsonObj.get("subtotals").toString()));
          }

          // validate the optional field `subtotals` (array)
          for (int i = 0; i < jsonArraysubtotals.size(); i++) {
            CartCartSubtotal.validateJsonElement(jsonArraysubtotals.get(i));
          };
        }
      }
      // validate the optional field `total`
      if (jsonObj.get("total") != null && !jsonObj.get("total").isJsonNull()) {
        CartMoney.validateJsonElement(jsonObj.get("total"));
      }
      // validate the optional field `totalDue`
      if (jsonObj.get("totalDue") != null && !jsonObj.get("totalDue").isJsonNull()) {
        CartMoney.validateJsonElement(jsonObj.get("totalDue"));
      }
      // validate the optional field `billingAddress`
      if (jsonObj.get("billingAddress") != null && !jsonObj.get("billingAddress").isJsonNull()) {
        CartPostalAddress.validateJsonElement(jsonObj.get("billingAddress"));
      }
      // validate the optional field `shippingAddress`
      if (jsonObj.get("shippingAddress") != null && !jsonObj.get("shippingAddress").isJsonNull()) {
        CartPostalAddress.validateJsonElement(jsonObj.get("shippingAddress"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        CartCartStatus.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `customer`
      if (jsonObj.get("customer") != null && !jsonObj.get("customer").isJsonNull()) {
        CartCustomerData.validateJsonElement(jsonObj.get("customer"));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CartCartData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CartCartData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CartCartData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CartCartData.class));

       return (TypeAdapter<T>) new TypeAdapter<CartCartData>() {
           @Override
           public void write(JsonWriter out, CartCartData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CartCartData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             CartCartData instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CartCartData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CartCartData
   * @throws IOException if the JSON string is invalid with respect to CartCartData
   */
  public static CartCartData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CartCartData.class);
  }

  /**
   * Convert an instance of CartCartData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

