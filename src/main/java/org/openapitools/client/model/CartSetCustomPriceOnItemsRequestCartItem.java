/*
 * Cart Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CartMoney;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import GeminiCommerce_Cart.JSON;

/**
 * CartSetCustomPriceOnItemsRequestCartItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-21T15:21:28.271708366Z[Etc/UTC]")
public class CartSetCustomPriceOnItemsRequestCartItem {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_FREE_OF_CHARGE = "freeOfCharge";
  @SerializedName(SERIALIZED_NAME_FREE_OF_CHARGE)
  private Boolean freeOfCharge;

  public static final String SERIALIZED_NAME_UNSET = "unset";
  @SerializedName(SERIALIZED_NAME_UNSET)
  private Boolean unset;

  public static final String SERIALIZED_NAME_CUSTOM_PRICE_ROW = "customPriceRow";
  @SerializedName(SERIALIZED_NAME_CUSTOM_PRICE_ROW)
  private CartMoney customPriceRow;

  public static final String SERIALIZED_NAME_CUSTOM_PRICE_UNIT = "customPriceUnit";
  @SerializedName(SERIALIZED_NAME_CUSTOM_PRICE_UNIT)
  private CartMoney customPriceUnit;

  public static final String SERIALIZED_NAME_DISCOUNT_PERCENTAGE = "discountPercentage";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_PERCENTAGE)
  private Float discountPercentage;

  public CartSetCustomPriceOnItemsRequestCartItem() {
  }

  public CartSetCustomPriceOnItemsRequestCartItem id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public CartSetCustomPriceOnItemsRequestCartItem freeOfCharge(Boolean freeOfCharge) {
    this.freeOfCharge = freeOfCharge;
    return this;
  }

   /**
   * Get freeOfCharge
   * @return freeOfCharge
  **/
  @javax.annotation.Nullable
  public Boolean getFreeOfCharge() {
    return freeOfCharge;
  }

  public void setFreeOfCharge(Boolean freeOfCharge) {
    this.freeOfCharge = freeOfCharge;
  }


  public CartSetCustomPriceOnItemsRequestCartItem unset(Boolean unset) {
    this.unset = unset;
    return this;
  }

   /**
   * Get unset
   * @return unset
  **/
  @javax.annotation.Nullable
  public Boolean getUnset() {
    return unset;
  }

  public void setUnset(Boolean unset) {
    this.unset = unset;
  }


  public CartSetCustomPriceOnItemsRequestCartItem customPriceRow(CartMoney customPriceRow) {
    this.customPriceRow = customPriceRow;
    return this;
  }

   /**
   * Get customPriceRow
   * @return customPriceRow
  **/
  @javax.annotation.Nullable
  public CartMoney getCustomPriceRow() {
    return customPriceRow;
  }

  public void setCustomPriceRow(CartMoney customPriceRow) {
    this.customPriceRow = customPriceRow;
  }


  public CartSetCustomPriceOnItemsRequestCartItem customPriceUnit(CartMoney customPriceUnit) {
    this.customPriceUnit = customPriceUnit;
    return this;
  }

   /**
   * Get customPriceUnit
   * @return customPriceUnit
  **/
  @javax.annotation.Nullable
  public CartMoney getCustomPriceUnit() {
    return customPriceUnit;
  }

  public void setCustomPriceUnit(CartMoney customPriceUnit) {
    this.customPriceUnit = customPriceUnit;
  }


  public CartSetCustomPriceOnItemsRequestCartItem discountPercentage(Float discountPercentage) {
    this.discountPercentage = discountPercentage;
    return this;
  }

   /**
   * Get discountPercentage
   * @return discountPercentage
  **/
  @javax.annotation.Nullable
  public Float getDiscountPercentage() {
    return discountPercentage;
  }

  public void setDiscountPercentage(Float discountPercentage) {
    this.discountPercentage = discountPercentage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CartSetCustomPriceOnItemsRequestCartItem cartSetCustomPriceOnItemsRequestCartItem = (CartSetCustomPriceOnItemsRequestCartItem) o;
    return Objects.equals(this.id, cartSetCustomPriceOnItemsRequestCartItem.id) &&
        Objects.equals(this.freeOfCharge, cartSetCustomPriceOnItemsRequestCartItem.freeOfCharge) &&
        Objects.equals(this.unset, cartSetCustomPriceOnItemsRequestCartItem.unset) &&
        Objects.equals(this.customPriceRow, cartSetCustomPriceOnItemsRequestCartItem.customPriceRow) &&
        Objects.equals(this.customPriceUnit, cartSetCustomPriceOnItemsRequestCartItem.customPriceUnit) &&
        Objects.equals(this.discountPercentage, cartSetCustomPriceOnItemsRequestCartItem.discountPercentage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, freeOfCharge, unset, customPriceRow, customPriceUnit, discountPercentage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CartSetCustomPriceOnItemsRequestCartItem {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    freeOfCharge: ").append(toIndentedString(freeOfCharge)).append("\n");
    sb.append("    unset: ").append(toIndentedString(unset)).append("\n");
    sb.append("    customPriceRow: ").append(toIndentedString(customPriceRow)).append("\n");
    sb.append("    customPriceUnit: ").append(toIndentedString(customPriceUnit)).append("\n");
    sb.append("    discountPercentage: ").append(toIndentedString(discountPercentage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("freeOfCharge");
    openapiFields.add("unset");
    openapiFields.add("customPriceRow");
    openapiFields.add("customPriceUnit");
    openapiFields.add("discountPercentage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CartSetCustomPriceOnItemsRequestCartItem
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CartSetCustomPriceOnItemsRequestCartItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CartSetCustomPriceOnItemsRequestCartItem is not found in the empty JSON string", CartSetCustomPriceOnItemsRequestCartItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CartSetCustomPriceOnItemsRequestCartItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CartSetCustomPriceOnItemsRequestCartItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `customPriceRow`
      if (jsonObj.get("customPriceRow") != null && !jsonObj.get("customPriceRow").isJsonNull()) {
        CartMoney.validateJsonElement(jsonObj.get("customPriceRow"));
      }
      // validate the optional field `customPriceUnit`
      if (jsonObj.get("customPriceUnit") != null && !jsonObj.get("customPriceUnit").isJsonNull()) {
        CartMoney.validateJsonElement(jsonObj.get("customPriceUnit"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CartSetCustomPriceOnItemsRequestCartItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CartSetCustomPriceOnItemsRequestCartItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CartSetCustomPriceOnItemsRequestCartItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CartSetCustomPriceOnItemsRequestCartItem.class));

       return (TypeAdapter<T>) new TypeAdapter<CartSetCustomPriceOnItemsRequestCartItem>() {
           @Override
           public void write(JsonWriter out, CartSetCustomPriceOnItemsRequestCartItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CartSetCustomPriceOnItemsRequestCartItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CartSetCustomPriceOnItemsRequestCartItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CartSetCustomPriceOnItemsRequestCartItem
  * @throws IOException if the JSON string is invalid with respect to CartSetCustomPriceOnItemsRequestCartItem
  */
  public static CartSetCustomPriceOnItemsRequestCartItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CartSetCustomPriceOnItemsRequestCartItem.class);
  }

 /**
  * Convert an instance of CartSetCustomPriceOnItemsRequestCartItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

